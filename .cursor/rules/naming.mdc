---
description: Rules for names
globs: *.ts
---
# Соглашение об именовании React Query хуков

## Обзор
Документ описывает соглашение об именовании хуков React Query в нашем проекте. Следование этим правилам обеспечивает согласованность и ясность кодовой базы.

## Шаблон именования
```typescript
use[Действие][Сущность][Характеристика]
```

## Компоненты имени

### 1. Действие (Может отсутствовать)
- Если хук просто получает данные, то действие можно опустить
- Для хуков мутации обязательно указывать действие:
  - `update` - обновление данных
  - `add` - добавление данных
  - `delete` - удаление данных
  - `upload` - загрузка файлов

### 2. Сущность (Обязательно)
Основная сущность, с которой работает хук:
- `Files` - файлы
- `Team` - команда
- `User` - пользователь
- `Transcription` - транскрипция
- `Document` - документ

### 3. Характеристика (Опционально)
Дополнительные спецификации:
- `ByStatus` - отфильтрованные по статусу
- `ById` - по идентификатору
- `SortedByDate` - отсортированные по дате

## Примеры

### Хуки для получения данных
```typescript
// Получение всех файлов
export function useFiles() {
  const { data: selectedTeamId } = useSelectedTeam();

  return useQuery({
    queryKey: ["files", selectedTeamId],
    queryFn: () => fetchFiles(selectedTeamId),
    enabled: !!selectedTeamId,
  });
}

// Получение файлов по статусу
export function useFilesByStatus() {
  const { data: files = [] } = useFiles();

  const filesByStatus = {
    pending: files.filter((file) => file.status === "pending"),
    processing: files.filter((file) => file.status === "processing"),
    completed: files.filter((file) => file.status === "completed"),
    error: files.filter((file) => file.status === "error"),
    all: files,
  };

  return filesByStatus;
}
```

### Хуки для изменения данных
```typescript
// Загрузка файла
export function useFileUpload() {
  const queryClient = useQueryClient();
  const { data: selectedTeamId } = useSelectedTeam();

  return useMutation({
    mutationFn: uploadFile,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["files", selectedTeamId] });
    },
  });
}

// Обновление транскрипции
export function useUpdateTranscription() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: updateTranscription,
    onSuccess: (data) => {
      queryClient.setQueryData(["transcription", data.id], data);
      queryClient.invalidateQueries({ queryKey: ["transcriptions"] });
    },
  });
}
```

## Правила

1. Все хуки начинаются с префикса `use`
2. Для хуков получения данных можно опустить действие, если оно очевидно
3. Для хуков мутации действие обязательно указывать
4. Имя должно чётко отражать, с какими данными работает хук
5. Хуки, возвращающие объекты с преобразованными данными, должны иметь характеристику в названии

## Примеры использования

```typescript
// Файлы
useFiles()
useFilesByStatus() 
useFileUpload()

// Транскрипции
useTranscriptions()
useTranscription(id)
useUpdateTranscription()

// Команды
useTeam()
useTeamMembersByRole()
useAddTeamMember()
```

## Участие в разработке
При добавлении новых хуков следуйте этим соглашениям об именовании для поддержания согласованности кода. Если необходимо ввести новый паттерн именования, обсудите это с командой.

---
По вопросам или предложениям по соглашению об именовании обращайтесь к тимлиду.