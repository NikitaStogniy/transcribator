---
description: Rules for names
globs: *.ts, *.tsx
---
# Соглашение об именовании Recoil селекторов

## Обзор
Документ описывает соглашение об именовании селекторов Recoil в нашем проекте. Следование этим правилам обеспечивает согласованность и ясность кодовой базы.

## Шаблон именования
```typescript
[действие][сущность][типДанных][характеристика][типСелектора]
```

## Компоненты имени

### 1. Действие (Обязательно)
- `get` - для получения данных
- `set` - для изменения данных

### 2. Сущность (Обязательно)
Основная сущность, с которой работает селектор:
- `User`
- `Product`
- `Order`
- `Brand`

### 3. Тип данных (Обязательно)
Тип возвращаемых данных:
- `List` - массив элементов
- `Details` - детальная информация
- `Count` - числовое значение
- `Status` - информация о статусе

### 4. Характеристика (Опционально)
Дополнительные спецификации:
- `Filtered` - отфильтрованные данные
- `ById` - по идентификатору
- `ByCategory` - по категории

### 5. Тип селектора (Обязательно)
- `Selector` - синхронный селектор
- `QuerySelector` - асинхронный селектор с API запросом

## Примеры

### Синхронные селекторы
```typescript
export const getUserDetailsSelector = selector({
  key: 'getUserDetailsSelector',
  get: ({get}) => {
    // Синхронные операции
  }
});

export const getProductFilteredCountSelector = selector({
  key: 'getProductFilteredCountSelector',
  get: ({get}) => {
    // Синхронные операции
  }
});
```

### Асинхронные селекторы
```typescript
export const getOrderListByStatusQuerySelector = selector({
  key: 'getOrderListByStatusQuerySelector',
  get: async ({get}) => {
    // API запрос
  }
});

export const getBrandListFilteredQuerySelector = selector({
  key: 'getBrandListFilteredQuerySelector',
  get: async ({get}) => {
    // API запрос
  }
});
```

## Правила

1. Ключ селектора должен совпадать с названием переменной
2. Префикс `get` обязателен для всех селекторов
3. Суффикс `QuerySelector` используется только для асинхронных селекторов
4. Суффикс `Selector` используется для синхронных селекторов
5. Название должно чётко отражать тип возвращаемых данных*

## Примеры использования

```typescript
// Продукты
getProductListQuerySelector
getProductDetailsByIdQuerySelector
getProductFilteredCountSelector
getProductCategoriesListSelector

// Пользователи
getUserProfileQuerySelector
getUserSettingsSelector
getUserNotificationsListSelector
getUserRoleSelector

// Заказы
getOrderListByStatusQuerySelector
getOrderTotalPriceSelector
getOrderFilteredItemsSelector
getOrderStatusSelector
```

## Участие в разработке
При добавлении новых селекторов следуйте этим соглашениям об именовании для поддержания согласованности кода. Если необходимо ввести новый паттерн именования, обсудите это с командой.

---
По вопросам или предложениям по соглашению об именовании обращайтесь к тимлиду.