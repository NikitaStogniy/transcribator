---
description: React query rules
globs: *.ts
alwaysApply: false
---
# React Query Usage Rules

## Overview

The project uses React Query for managing API calls and caching with a unified approach. This document outlines the rules and best practices for working with React Query in the project.

```
app/
├── api/                      // API routes
├── (routes)/                 // App routes 
│   └── products/
│       ├── page.tsx
│       ├── [id]/
│       │   └── page.tsx
│       └── _components/      // Route-specific components
├── _components/              // Shared components
└── _hooks/            red hooks
    └── queries/              // React Query hooks
        ├── products.ts       // Product-related queries
        ├── users.ts          // User-related queries
        └── ...
```

## Организация Query Hooks

```typescript
// app/_hooks/queries/products.ts
import { QUERY_KEYS } from '@/lib/queryKeys';

export function useProducts(params?: ProductsParams) {
  return useQuery({
    queryKey: QUERY_KEYS.PRODUCTS.LIST(params),
    queryFn: () => fetchProducts(params),
  });
}

export function useProductDetails(id: string) {
  return useQuery({
    queryKey: QUERY_KEYS.PRODUCTS.DETAIL(id),
    queryFn: () => fetchProductById(id),
    enabled: !!id,
  });
}

export function useCreateProduct() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (data: CreateProductDTO) => createProduct(data),
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: QUERY_KEYS.PRODUCTS.LIST(),
      });
    },
  });
}
```

## API-функции

```typescript
// app/_hooks/queries/products.ts (продолжение)
async function fetchProducts(params?: ProductsParams) {
  const searchParams = new URLSearchParams();
  if (params?.categoryId) searchParams.set('categoryId', params.categoryId);
  if (params?.sortBy) searchParams.set('sortBy', params.sortBy);
  
  const response = await fetch(`/api/products?${searchParams.toString()}`);
  if (!response.ok) throw new Error('Failed to fetch products');
  return response.json();
}

async function fetchProductById(id: string) {
  const response = await fetch(`/api/products/${id}`);
  if (!response.ok) throw new Error('Failed to fetch product');
  return response.json();
}

async function createProduct(data: CreateProductDTO) {
  const response = await fetch('/api/products', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  if (!response.ok) throw new Error('Failed to create product');
  return response.json();
}
```

## Query Keys

```typescript
// lib/queryKeys.ts
export const QUERY_KEYS = {
  PRODUCTS: {
    LIST: (params?: ProductsParams) => ['products', 'list', params].filter(Boolean),
    DETAIL: (id?: string) => ['products', 'detail', id].filter(Boolean),
  },
  USERS: {
    LIST: (params?: UsersParams) => ['users', 'list', params].filter(Boolean),
    DETAIL: (id?: string) => ['users', 'detail', id].filter(Boolean),
  },
};
```

## Использование в компонентах

```tsx
// app/products/page.tsx
'use client';

import { useProducts } from '@/app/_hooks/queries/products';

export default function ProductsPage() {
  const { data, isLoading, error } = useProducts();
  
  if (isLoading) return <div>Загрузка...</div>;
  if (error) return <div>Ошибка: {error.message}</div>;
  
  return (
    <div>
      <h1>Продукты</h1>
      <ul>
        {data?.map(product => (
          <li key={product.id}>{product.name}</li>
        ))}
      </ul>
    </div>
  );
}
```
