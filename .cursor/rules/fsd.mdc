---
description: Project architecture
globs: src
---
# Feature Sliced Design - Структура и правила размещения

### Последовательность вопросов для определения слоя:

1. **Является ли это кодом инициализации/запуска приложения?**
   - Да → `base`
   - Нет → идём дальше

2. **Является ли это кодом страницы (роутом), где собирается конечный UI для пользователя?**
   - Да → `screens/<screen>`
   - Нет → дальше

3. **Это крупный интерфейсный блок (виджет), сам по себе несущий целый сценарий UI?**
   - Да → `widgets/<widget>`
   - Нет → дальше

4. **Это бизнес-функциональность/действие (фича)?**
   - Да → `features/<feature>`
   - Нет → дальше

5. **Это относится к конкретной сущности предметной области?**
   - Да → `entities/<entity>`
   - Нет → дальше

6. **Всё остальное** → `shared`

### Для каждого файла внутри слоя:

- UI-компонент? → `ui`
- Модель/бизнес-логика?(если чисто бизнес-логика хуков, то хуки в `model`. Иногда уместно создать сегмент, отражающий конкретную цель: например, model/form или model/profile-form, если все эти хуки про работу с формами профиля) → `model`
- Запросы к API и типы ответов? → `api`
- Локальные утилиты? → `lib`
- Локальные конфиги? → `config`

## Детальная проверка по слоям

### base
- Код для старта приложения, роутинга, глобальных стилей?
- Если да → `base`

### screens
- Конечная страница или роут, где собирается UI?
- Если да → `screens`

### widgets
- Крупный композиционный блок интерфейса, независимый от конкретных сущностей?
- Если да → `widgets`

### features
- Отвечает за конкретное действие пользователя или бизнес-функцию?
- Содержит логику изменения состояния?
- Если да → `features`

### entities
- Описывает данные об объекте предметной области и его логику?
- Если да → `entities`

### shared
- Утилита, общий UI-компонент без бизнес-контекста?
- Если да → `shared`

## Определение слоя и среза

Когда определили слой и срез (например, `entities/product`), задаём вопросы для распределения внутри этого среза:

### 1. ui
- Это визуальный компонент, отвечающий за отображение данных или взаимодействие с пользователем без тяжелой бизнес-логики (презентационная логика)?
- Если да — папка `ui`

entities/user/ui/
├── UserAvatar.tsx     // Аватар пользователя
├── UserInfo.tsx       // Информация о пользователе
└── UserList.tsx       // Список пользователей
└── index.ts           // Реэкспорт

### 2. model
- Это бизнес-логика, состояние (например, атомы Recoil), селекторы, логика изменения данных, схемы валидации, которые связаны с конкретным срезом? Иногда уместно создать сегмент, отражающий конкретную цель: например, model/form или model/profile-form, если все эти хуки про работу с формами профиля
- Если да — папка `model`

entities/user/model/
├── atoms.ts        // Атомы Recoil
├── selectors.ts    // Селекторы
├── types.ts        // Типы и интерфейсы
└── index.ts        // Реэкспорт

### 3. api
- Это код, делающий запросы к бекенду, мапперы данных, типы, интерфейсы данных, относящиеся к данному срезу?
- Если да — папка `api`

entities/user/api/
├── userController.ts     // Контроллер
   ├── getUser.ts // Хук для запроса
   ├── createUser.ts // Хук для создания
   ├── updateUser.ts // Хук для обновления
   ├── deleteUser.ts // Хук для удаления
├── types.ts        // Типы и интерфейсы
├── defaults.ts     // Дефолтные данные
├── useGetUser.ts // Хук для запроса
├── usePostUser.ts // Хук для создания
├── usePutUser.ts // Хук для обновления
├── useDeleteUser.ts // Хук для удаления
└── index.ts        // Реэкспорт

> **Примечание:** Внутри API можно импортировать из любых слоев ниже (например, `shared`), но нельзя импортировать из других папок слайса (например, из `model` в `api` нельзя).

# Хуки для запросов в api

## Типы запросов

### Получение данных (GET)
```typescript
useFetch[Entity]
```
**Пример:** `useFetchBusinessInstanceDetails`

### Создание/добавление (POST)
```typescript
usePost[Entity]
```
**Пример:** `usePostBusinessInstance`

### Удаление (DELETE)
```typescript
useDelete[Entity]
```
**Пример:** `useDeleteBusinessInstance`

### Обновление (PUT)
```typescript
usePut[Entity]
```
**Пример:** `usePutBusinessInstance`

---

> **Примечание:** Замените `[Entity]` на название вашей сущности при использовании хуков.

### 4. lib
- Это вспомогательные функции, хелперы, которые нужны только внутри этого конкретного среза и не являются универсальными?
- Если да — папка `lib`

entities/user/lib/
├── formatUserName.ts // Функция для форматирования имени пользователя
├── calculateUserAge.ts // Функция для вычисления возраста пользователя
└── index.ts        // Реэкспорт

### 5. config
- Это файлы конфигурации для конкретного среза (например, фиче-флаги или отдельный конфиг)
- Если да — папка `config`

entities/user/config/
├── userConfig.ts // Конфиг для пользователя
├── userFlags.ts // Флаги для пользователя
└── index.ts        // Реэкспорт

### 6. dto
- Это трансформеры данных, которые преобразуют данные в необходимый формат.
- Можно использовать для селектов в api
- Начинаются с `from` или `to`.
- Если трансформируем данные для API, используем `toНазваниеРучки` (как в контроллере).

entities/user/dto/
├── toUserDto.ts     // Дефолтные данные
├── toUserBirthdayDto.ts // Хук для создания
├── toUserGenderDto.ts
└── index.ts        // Реэкспорт

## Общие правила

- Каждый слайс и каждая папка внутри слайса должны иметь свой `index.ts`, который импортирует все необходимые вещи из папки или слайса.
- В `index.ts` слайса не должно быть ничего, кроме импортов

entities/user/index.ts

export * from './ui';
export * from './model';
export * from './api';
export * from './lib';
export * from './config';
export * from './dto';

