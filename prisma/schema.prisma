generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  transcriptions Transcription[]
  minutesBalance Int             @default(0)
  minutesUsed    Int             @default(0)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transcription {
  id               String                @id @default(cuid())
  userId           String
  fileName         String
  audioUrl         String?
  assemblyId       String?
  status           String    @default("processing")
  error            String?
  duration         Int?
  language         String    @default("ru")
  participantsCount Int      @default(1)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  segments         TranscriptionSegment[]
  user             User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model TranscriptionSegment {
  id              String        @id @default(cuid())
  transcriptionId String
  startTime       Float         // Start time in seconds
  endTime         Float         // End time in seconds
  text            String        @db.Text
  speaker         String?       // Speaker label if available
  confidence      Float?        // Confidence score
  originalText    String?       @db.Text  // Original text before any edits
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  transcription   Transcription @relation(fields: [transcriptionId], references: [id], onDelete: Cascade)

  @@index([transcriptionId])
} 